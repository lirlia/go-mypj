// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: api/durian.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var file_api_durian_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50000,
		Name:          "com.xflag.durian.api.readonly",
		Tag:           "varint,50000,opt,name=readonly",
		Filename:      "api/durian.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50001,
		Name:          "com.xflag.durian.api.needs_login",
		Tag:           "varint,50001,opt,name=needs_login",
		Filename:      "api/durian.proto",
	},
}

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional bool readonly = 50000;
	E_Readonly = &file_api_durian_proto_extTypes[0]
	// optional bool needs_login = 50001;
	E_NeedsLogin = &file_api_durian_proto_extTypes[1]
)

var File_api_durian_proto protoreflect.FileDescriptor

var file_api_durian_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x61, 0x70, 0x69, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x61, 0x70, 0x69, 0x2f,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x61, 0x70,
	0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x62, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f,
	0x72, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x61,
	0x63, 0x68, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x69, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x84, 0x2a, 0x0a, 0x06, 0x44, 0x75,
	0x72, 0x69, 0x61, 0x6e, 0x12, 0x66, 0x0a, 0x09, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x63, 0x68,
	0x6f, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x63,
	0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x01, 0x88, 0xb5, 0x18, 0x00, 0x12, 0x69, 0x0a, 0x0a,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e,
	0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80,
	0xb5, 0x18, 0x01, 0x88, 0xb5, 0x18, 0x00, 0x12, 0x7b, 0x0a, 0x10, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x71, 0x12, 0x2d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x71, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f,
	0x6e, 0x71, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00,
	0x88, 0xb5, 0x18, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x64,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08,
	0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x7b, 0x0a, 0x10, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18,
	0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x93, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64,
	0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x90, 0x01, 0x0a, 0x17,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66,
	0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x6c,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66,
	0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x01, 0x88, 0xb5, 0x18, 0x00, 0x12, 0x6f, 0x0a, 0x0c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66,
	0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x00, 0x12, 0x5a, 0x0a,
	0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c,
	0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x00, 0x12, 0x75, 0x0a, 0x0e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x6f, 0x6c, 0x6f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x6c, 0x6f, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78,
	0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x6c, 0x6f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01,
	0x12, 0x78, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x6f, 0x6c, 0x6f, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e,
	0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x53, 0x6f, 0x6c, 0x6f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53,
	0x6f, 0x6c, 0x6f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x72, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66,
	0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x8d,
	0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x8d,
	0x01, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x8a,
	0x01, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78,
	0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x01, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x8d, 0x01, 0x0a, 0x16,
	0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x51, 0x75, 0x65, 0x73, 0x74, 0x41, 0x73,
	0x42, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c,
	0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x51, 0x75, 0x65, 0x73, 0x74, 0x41, 0x73, 0x42, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x73, 0x42, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x8a, 0x01, 0x0a, 0x15,
	0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x51, 0x75, 0x65, 0x73, 0x74, 0x41, 0x73,
	0x44, 0x72, 0x6f, 0x6e, 0x65, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61,
	0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x51, 0x75, 0x65, 0x73, 0x74, 0x41, 0x73, 0x44, 0x72, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x51, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x73, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08,
	0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x78, 0x0a, 0x0f, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5,
	0x18, 0x01, 0x12, 0x78, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61,
	0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e,
	0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x7b, 0x0a, 0x10,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72,
	0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x7b, 0x0a, 0x10, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x47, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x47, 0x75, 0x65, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x47, 0x75, 0x65, 0x73, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5,
	0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x7b, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x47, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88,
	0xb5, 0x18, 0x01, 0x12, 0x7e, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x72, 0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78,
	0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78,
	0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88,
	0xb5, 0x18, 0x01, 0x12, 0x78, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c,
	0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67,
	0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x01, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x8d, 0x01,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x53, 0x65, 0x65, 0x64, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78,
	0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x53, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x7b, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72,
	0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x08, 0x80, 0xb5, 0x18, 0x01, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x72, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x71, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x71, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66,
	0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x71, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x01, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x78,
	0x0a, 0x0f, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e,
	0x71, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x71, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x71, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08,
	0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x4b, 0x69, 0x7a,
	0x75, 0x6e, 0x61, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f,
	0x6e, 0x71, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64,
	0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x69, 0x7a, 0x75, 0x6e, 0x61,
	0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x71, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c,
	0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x69,
	0x7a, 0x75, 0x6e, 0x61, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x71, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18,
	0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x7e, 0x0a, 0x11, 0x45, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x71, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x71, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x71, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18,
	0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x78, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78,
	0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c,
	0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x01, 0x88, 0xb5, 0x18, 0x01, 0x12,
	0x78, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64,
	0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72,
	0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x08, 0x80, 0xb5, 0x18, 0x01, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x7b, 0x0a, 0x10, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5,
	0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x7e, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5,
	0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x78, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66,
	0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x01, 0x88, 0xb5, 0x18, 0x01,
	0x12, 0x72, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x01,
	0x88, 0xb5, 0x18, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x72, 0x6f, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x72, 0x6f, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08,
	0x80, 0xb5, 0x18, 0x01, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72,
	0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x01, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x69, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x62, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e,
	0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x72, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80,
	0xb5, 0x18, 0x01, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x66, 0x0a, 0x09, 0x44, 0x72, 0x61, 0x77, 0x47,
	0x61, 0x63, 0x68, 0x61, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67,
	0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x61, 0x77,
	0x47, 0x61, 0x63, 0x68, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x47, 0x61, 0x63, 0x68, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x12,
	0x72, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x73,
	0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72,
	0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x69, 0x66, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x01, 0x88,
	0xb5, 0x18, 0x01, 0x12, 0x7b, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66,
	0x6c, 0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x66, 0x6c,
	0x61, 0x67, 0x2e, 0x64, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01,
	0x3a, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0, 0x86, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x3a, 0x41,
	0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd1, 0x86,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x42, 0x40, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x78, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x64, 0x75, 0x72, 0x69,
	0x61, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0xaa, 0x02, 0x10, 0x58, 0x46, 0x4c, 0x41, 0x47, 0x2e, 0x44, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x57, 0x65, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_api_durian_proto_goTypes = []interface{}{
	(*descriptorpb.MethodOptions)(nil),       // 0: google.protobuf.MethodOptions
	(*UnaryEchoRequest)(nil),                 // 1: com.xflag.durian.api.UnaryEchoRequest
	(*DebugErrorRequest)(nil),                // 2: com.xflag.durian.api.DebugErrorRequest
	(*DebugAddUserMonqRequest)(nil),          // 3: com.xflag.durian.api.DebugAddUserMonqRequest
	(*DebugAddUserAvatarRequest)(nil),        // 4: com.xflag.durian.api.DebugAddUserAvatarRequest
	(*DebugAddUserItemRequest)(nil),          // 5: com.xflag.durian.api.DebugAddUserItemRequest
	(*DebugIssueVoiceChatTokenRequest)(nil),  // 6: com.xflag.durian.api.DebugIssueVoiceChatTokenRequest
	(*DebugRecoverUserStaminaRequest)(nil),   // 7: com.xflag.durian.api.DebugRecoverUserStaminaRequest
	(*GetMetadataRequest)(nil),               // 8: com.xflag.durian.api.GetMetadataRequest
	(*RegisterUserRequest)(nil),              // 9: com.xflag.durian.api.RegisterUserRequest
	(*LoginRequest)(nil),                     // 10: com.xflag.durian.api.LoginRequest
	(*StartSoloQuestRequest)(nil),            // 11: com.xflag.durian.api.StartSoloQuestRequest
	(*FinishSoloQuestRequest)(nil),           // 12: com.xflag.durian.api.FinishSoloQuestRequest
	(*ContinueQuestRequest)(nil),             // 13: com.xflag.durian.api.ContinueQuestRequest
	(*CreateLocationMatchingRequest)(nil),    // 14: com.xflag.durian.api.CreateLocationMatchingRequest
	(*CancelLocationMatchingRequest)(nil),    // 15: com.xflag.durian.api.CancelLocationMatchingRequest
	(*FindLocationMatchingsRequest)(nil),     // 16: com.xflag.durian.api.FindLocationMatchingsRequest
	(*JoinMultiQuestAsBusterRequest)(nil),    // 17: com.xflag.durian.api.JoinMultiQuestAsBusterRequest
	(*JoinMultiQuestAsDroneRequest)(nil),     // 18: com.xflag.durian.api.JoinMultiQuestAsDroneRequest
	(*LeaveMultiQuestRequest)(nil),           // 19: com.xflag.durian.api.LeaveMultiQuestRequest
	(*StartMultiQuestRequest)(nil),           // 20: com.xflag.durian.api.StartMultiQuestRequest
	(*FinishMultiQuestRequest)(nil),          // 21: com.xflag.durian.api.FinishMultiQuestRequest
	(*FinishGuestQuestRequest)(nil),          // 22: com.xflag.durian.api.FinishGuestQuestRequest
	(*ResignGuestQuestRequest)(nil),          // 23: com.xflag.durian.api.ResignGuestQuestRequest
	(*UseQuestDroneItemRequest)(nil),         // 24: com.xflag.durian.api.UseQuestDroneItemRequest
	(*GetQuestBustersRequest)(nil),           // 25: com.xflag.durian.api.GetQuestBustersRequest
	(*CreateQuestLotterySeedRequest)(nil),    // 26: com.xflag.durian.api.CreateQuestLotterySeedRequest
	(*GetUnclosedQuestRequest)(nil),          // 27: com.xflag.durian.api.GetUnclosedQuestRequest
	(*ListUserMonqsRequest)(nil),             // 28: com.xflag.durian.api.ListUserMonqsRequest
	(*EnhanceUserMonqRequest)(nil),           // 29: com.xflag.durian.api.EnhanceUserMonqRequest
	(*KizunaEnhanceUserMonqRequest)(nil),     // 30: com.xflag.durian.api.KizunaEnhanceUserMonqRequest
	(*EvolutionUserMonqRequest)(nil),         // 31: com.xflag.durian.api.EvolutionUserMonqRequest
	(*ListUserAvatarsRequest)(nil),           // 32: com.xflag.durian.api.ListUserAvatarsRequest
	(*ListUserBustersRequest)(nil),           // 33: com.xflag.durian.api.ListUserBustersRequest
	(*UpdateUserBusterRequest)(nil),          // 34: com.xflag.durian.api.UpdateUserBusterRequest
	(*UpdateUserProfileRequest)(nil),         // 35: com.xflag.durian.api.UpdateUserProfileRequest
	(*FindUserProfileRequest)(nil),           // 36: com.xflag.durian.api.FindUserProfileRequest
	(*GetUserStatusRequest)(nil),             // 37: com.xflag.durian.api.GetUserStatusRequest
	(*ListUserDroneItemsRequest)(nil),        // 38: com.xflag.durian.api.ListUserDroneItemsRequest
	(*ListUserBasicItemsRequest)(nil),        // 39: com.xflag.durian.api.ListUserBasicItemsRequest
	(*GetUserOrbRequest)(nil),                // 40: com.xflag.durian.api.GetUserOrbRequest
	(*DrawGachaRequest)(nil),                 // 41: com.xflag.durian.api.DrawGachaRequest
	(*ListUserGiftsRequest)(nil),             // 42: com.xflag.durian.api.ListUserGiftsRequest
	(*ReceiveUserGiftsRequest)(nil),          // 43: com.xflag.durian.api.ReceiveUserGiftsRequest
	(*UnaryEchoResponse)(nil),                // 44: com.xflag.durian.api.UnaryEchoResponse
	(*DebugErrorResponse)(nil),               // 45: com.xflag.durian.api.DebugErrorResponse
	(*DebugAddUserMonqResponse)(nil),         // 46: com.xflag.durian.api.DebugAddUserMonqResponse
	(*DebugAddUserAvatarResponse)(nil),       // 47: com.xflag.durian.api.DebugAddUserAvatarResponse
	(*DebugAddUserItemResponse)(nil),         // 48: com.xflag.durian.api.DebugAddUserItemResponse
	(*DebugIssueVoiceChatTokenResponse)(nil), // 49: com.xflag.durian.api.DebugIssueVoiceChatTokenResponse
	(*DebugRecoverUserStaminaResponse)(nil),  // 50: com.xflag.durian.api.DebugRecoverUserStaminaResponse
	(*GetMetadataResponse)(nil),              // 51: com.xflag.durian.api.GetMetadataResponse
	(*RegisterUserResponse)(nil),             // 52: com.xflag.durian.api.RegisterUserResponse
	(*LoginResponse)(nil),                    // 53: com.xflag.durian.api.LoginResponse
	(*StartSoloQuestResponse)(nil),           // 54: com.xflag.durian.api.StartSoloQuestResponse
	(*FinishSoloQuestResponse)(nil),          // 55: com.xflag.durian.api.FinishSoloQuestResponse
	(*ContinueQuestResponse)(nil),            // 56: com.xflag.durian.api.ContinueQuestResponse
	(*CreateLocationMatchingResponse)(nil),   // 57: com.xflag.durian.api.CreateLocationMatchingResponse
	(*CancelLocationMatchingResponse)(nil),   // 58: com.xflag.durian.api.CancelLocationMatchingResponse
	(*FindLocationMatchingsResponse)(nil),    // 59: com.xflag.durian.api.FindLocationMatchingsResponse
	(*JoinMultiQuestAsBusterResponse)(nil),   // 60: com.xflag.durian.api.JoinMultiQuestAsBusterResponse
	(*JoinMultiQuestAsDroneResponse)(nil),    // 61: com.xflag.durian.api.JoinMultiQuestAsDroneResponse
	(*LeaveMultiQuestResponse)(nil),          // 62: com.xflag.durian.api.LeaveMultiQuestResponse
	(*StartMultiQuestResponse)(nil),          // 63: com.xflag.durian.api.StartMultiQuestResponse
	(*FinishMultiQuestResponse)(nil),         // 64: com.xflag.durian.api.FinishMultiQuestResponse
	(*FinishGuestQuestResponse)(nil),         // 65: com.xflag.durian.api.FinishGuestQuestResponse
	(*ResignGuestQuestResponse)(nil),         // 66: com.xflag.durian.api.ResignGuestQuestResponse
	(*UseQuestDroneItemResponse)(nil),        // 67: com.xflag.durian.api.UseQuestDroneItemResponse
	(*GetQuestBustersResponse)(nil),          // 68: com.xflag.durian.api.GetQuestBustersResponse
	(*CreateQuestLotterySeedResponse)(nil),   // 69: com.xflag.durian.api.CreateQuestLotterySeedResponse
	(*GetUnclosedQuestResponse)(nil),         // 70: com.xflag.durian.api.GetUnclosedQuestResponse
	(*ListUserMonqsResponse)(nil),            // 71: com.xflag.durian.api.ListUserMonqsResponse
	(*EnhanceUserMonqResponse)(nil),          // 72: com.xflag.durian.api.EnhanceUserMonqResponse
	(*KizunaEnhanceUserMonqResponse)(nil),    // 73: com.xflag.durian.api.KizunaEnhanceUserMonqResponse
	(*EvolutionUserMonqResponse)(nil),        // 74: com.xflag.durian.api.EvolutionUserMonqResponse
	(*ListUserAvatarsResponse)(nil),          // 75: com.xflag.durian.api.ListUserAvatarsResponse
	(*ListUserBustersResponse)(nil),          // 76: com.xflag.durian.api.ListUserBustersResponse
	(*UpdateUserBusterResponse)(nil),         // 77: com.xflag.durian.api.UpdateUserBusterResponse
	(*UpdateUserProfileResponse)(nil),        // 78: com.xflag.durian.api.UpdateUserProfileResponse
	(*FindUserProfileResponse)(nil),          // 79: com.xflag.durian.api.FindUserProfileResponse
	(*GetUserStatusResponse)(nil),            // 80: com.xflag.durian.api.GetUserStatusResponse
	(*ListUserDroneItemsResponse)(nil),       // 81: com.xflag.durian.api.ListUserDroneItemsResponse
	(*ListUserBasicItemsResponse)(nil),       // 82: com.xflag.durian.api.ListUserBasicItemsResponse
	(*GetUserOrbResponse)(nil),               // 83: com.xflag.durian.api.GetUserOrbResponse
	(*DrawGachaResponse)(nil),                // 84: com.xflag.durian.api.DrawGachaResponse
	(*ListUserGiftsResponse)(nil),            // 85: com.xflag.durian.api.ListUserGiftsResponse
	(*ReceiveUserGiftsResponse)(nil),         // 86: com.xflag.durian.api.ReceiveUserGiftsResponse
}
var file_api_durian_proto_depIdxs = []int32{
	0,  // 0: com.xflag.durian.api.readonly:extendee -> google.protobuf.MethodOptions
	0,  // 1: com.xflag.durian.api.needs_login:extendee -> google.protobuf.MethodOptions
	1,  // 2: com.xflag.durian.api.Durian.UnaryEcho:input_type -> com.xflag.durian.api.UnaryEchoRequest
	2,  // 3: com.xflag.durian.api.Durian.DebugError:input_type -> com.xflag.durian.api.DebugErrorRequest
	3,  // 4: com.xflag.durian.api.Durian.DebugAddUserMonq:input_type -> com.xflag.durian.api.DebugAddUserMonqRequest
	4,  // 5: com.xflag.durian.api.Durian.DebugAddUserAvatar:input_type -> com.xflag.durian.api.DebugAddUserAvatarRequest
	5,  // 6: com.xflag.durian.api.Durian.DebugAddUserItem:input_type -> com.xflag.durian.api.DebugAddUserItemRequest
	6,  // 7: com.xflag.durian.api.Durian.DebugIssueVoiceChatToken:input_type -> com.xflag.durian.api.DebugIssueVoiceChatTokenRequest
	7,  // 8: com.xflag.durian.api.Durian.DebugRecoverUserStamina:input_type -> com.xflag.durian.api.DebugRecoverUserStaminaRequest
	8,  // 9: com.xflag.durian.api.Durian.GetMetadata:input_type -> com.xflag.durian.api.GetMetadataRequest
	9,  // 10: com.xflag.durian.api.Durian.RegisterUser:input_type -> com.xflag.durian.api.RegisterUserRequest
	10, // 11: com.xflag.durian.api.Durian.Login:input_type -> com.xflag.durian.api.LoginRequest
	11, // 12: com.xflag.durian.api.Durian.StartSoloQuest:input_type -> com.xflag.durian.api.StartSoloQuestRequest
	12, // 13: com.xflag.durian.api.Durian.FinishSoloQuest:input_type -> com.xflag.durian.api.FinishSoloQuestRequest
	13, // 14: com.xflag.durian.api.Durian.ContinueQuest:input_type -> com.xflag.durian.api.ContinueQuestRequest
	14, // 15: com.xflag.durian.api.Durian.CreateLocationMatching:input_type -> com.xflag.durian.api.CreateLocationMatchingRequest
	15, // 16: com.xflag.durian.api.Durian.CancelLocationMatching:input_type -> com.xflag.durian.api.CancelLocationMatchingRequest
	16, // 17: com.xflag.durian.api.Durian.FindLocationMatchings:input_type -> com.xflag.durian.api.FindLocationMatchingsRequest
	17, // 18: com.xflag.durian.api.Durian.JoinMultiQuestAsBuster:input_type -> com.xflag.durian.api.JoinMultiQuestAsBusterRequest
	18, // 19: com.xflag.durian.api.Durian.JoinMultiQuestAsDrone:input_type -> com.xflag.durian.api.JoinMultiQuestAsDroneRequest
	19, // 20: com.xflag.durian.api.Durian.LeaveMultiQuest:input_type -> com.xflag.durian.api.LeaveMultiQuestRequest
	20, // 21: com.xflag.durian.api.Durian.StartMultiQuest:input_type -> com.xflag.durian.api.StartMultiQuestRequest
	21, // 22: com.xflag.durian.api.Durian.FinishMultiQuest:input_type -> com.xflag.durian.api.FinishMultiQuestRequest
	22, // 23: com.xflag.durian.api.Durian.FinishGuestQuest:input_type -> com.xflag.durian.api.FinishGuestQuestRequest
	23, // 24: com.xflag.durian.api.Durian.ResignGuestQuest:input_type -> com.xflag.durian.api.ResignGuestQuestRequest
	24, // 25: com.xflag.durian.api.Durian.UseQuestDroneItem:input_type -> com.xflag.durian.api.UseQuestDroneItemRequest
	25, // 26: com.xflag.durian.api.Durian.GetQuestBusters:input_type -> com.xflag.durian.api.GetQuestBustersRequest
	26, // 27: com.xflag.durian.api.Durian.CreateQuestLotterySeed:input_type -> com.xflag.durian.api.CreateQuestLotterySeedRequest
	27, // 28: com.xflag.durian.api.Durian.GetUnclosedQuest:input_type -> com.xflag.durian.api.GetUnclosedQuestRequest
	28, // 29: com.xflag.durian.api.Durian.ListUserMonqs:input_type -> com.xflag.durian.api.ListUserMonqsRequest
	29, // 30: com.xflag.durian.api.Durian.EnhanceUserMonq:input_type -> com.xflag.durian.api.EnhanceUserMonqRequest
	30, // 31: com.xflag.durian.api.Durian.KizunaEnhanceUserMonq:input_type -> com.xflag.durian.api.KizunaEnhanceUserMonqRequest
	31, // 32: com.xflag.durian.api.Durian.EvolutionUserMonq:input_type -> com.xflag.durian.api.EvolutionUserMonqRequest
	32, // 33: com.xflag.durian.api.Durian.ListUserAvatars:input_type -> com.xflag.durian.api.ListUserAvatarsRequest
	33, // 34: com.xflag.durian.api.Durian.ListUserBusters:input_type -> com.xflag.durian.api.ListUserBustersRequest
	34, // 35: com.xflag.durian.api.Durian.UpdateUserBuster:input_type -> com.xflag.durian.api.UpdateUserBusterRequest
	35, // 36: com.xflag.durian.api.Durian.UpdateUserProfile:input_type -> com.xflag.durian.api.UpdateUserProfileRequest
	36, // 37: com.xflag.durian.api.Durian.FindUserProfile:input_type -> com.xflag.durian.api.FindUserProfileRequest
	37, // 38: com.xflag.durian.api.Durian.GetUserStatus:input_type -> com.xflag.durian.api.GetUserStatusRequest
	38, // 39: com.xflag.durian.api.Durian.ListUserDroneItems:input_type -> com.xflag.durian.api.ListUserDroneItemsRequest
	39, // 40: com.xflag.durian.api.Durian.ListUserBasicItems:input_type -> com.xflag.durian.api.ListUserBasicItemsRequest
	40, // 41: com.xflag.durian.api.Durian.GetUserOrb:input_type -> com.xflag.durian.api.GetUserOrbRequest
	41, // 42: com.xflag.durian.api.Durian.DrawGacha:input_type -> com.xflag.durian.api.DrawGachaRequest
	42, // 43: com.xflag.durian.api.Durian.ListUserGifts:input_type -> com.xflag.durian.api.ListUserGiftsRequest
	43, // 44: com.xflag.durian.api.Durian.ReceiveUserGifts:input_type -> com.xflag.durian.api.ReceiveUserGiftsRequest
	44, // 45: com.xflag.durian.api.Durian.UnaryEcho:output_type -> com.xflag.durian.api.UnaryEchoResponse
	45, // 46: com.xflag.durian.api.Durian.DebugError:output_type -> com.xflag.durian.api.DebugErrorResponse
	46, // 47: com.xflag.durian.api.Durian.DebugAddUserMonq:output_type -> com.xflag.durian.api.DebugAddUserMonqResponse
	47, // 48: com.xflag.durian.api.Durian.DebugAddUserAvatar:output_type -> com.xflag.durian.api.DebugAddUserAvatarResponse
	48, // 49: com.xflag.durian.api.Durian.DebugAddUserItem:output_type -> com.xflag.durian.api.DebugAddUserItemResponse
	49, // 50: com.xflag.durian.api.Durian.DebugIssueVoiceChatToken:output_type -> com.xflag.durian.api.DebugIssueVoiceChatTokenResponse
	50, // 51: com.xflag.durian.api.Durian.DebugRecoverUserStamina:output_type -> com.xflag.durian.api.DebugRecoverUserStaminaResponse
	51, // 52: com.xflag.durian.api.Durian.GetMetadata:output_type -> com.xflag.durian.api.GetMetadataResponse
	52, // 53: com.xflag.durian.api.Durian.RegisterUser:output_type -> com.xflag.durian.api.RegisterUserResponse
	53, // 54: com.xflag.durian.api.Durian.Login:output_type -> com.xflag.durian.api.LoginResponse
	54, // 55: com.xflag.durian.api.Durian.StartSoloQuest:output_type -> com.xflag.durian.api.StartSoloQuestResponse
	55, // 56: com.xflag.durian.api.Durian.FinishSoloQuest:output_type -> com.xflag.durian.api.FinishSoloQuestResponse
	56, // 57: com.xflag.durian.api.Durian.ContinueQuest:output_type -> com.xflag.durian.api.ContinueQuestResponse
	57, // 58: com.xflag.durian.api.Durian.CreateLocationMatching:output_type -> com.xflag.durian.api.CreateLocationMatchingResponse
	58, // 59: com.xflag.durian.api.Durian.CancelLocationMatching:output_type -> com.xflag.durian.api.CancelLocationMatchingResponse
	59, // 60: com.xflag.durian.api.Durian.FindLocationMatchings:output_type -> com.xflag.durian.api.FindLocationMatchingsResponse
	60, // 61: com.xflag.durian.api.Durian.JoinMultiQuestAsBuster:output_type -> com.xflag.durian.api.JoinMultiQuestAsBusterResponse
	61, // 62: com.xflag.durian.api.Durian.JoinMultiQuestAsDrone:output_type -> com.xflag.durian.api.JoinMultiQuestAsDroneResponse
	62, // 63: com.xflag.durian.api.Durian.LeaveMultiQuest:output_type -> com.xflag.durian.api.LeaveMultiQuestResponse
	63, // 64: com.xflag.durian.api.Durian.StartMultiQuest:output_type -> com.xflag.durian.api.StartMultiQuestResponse
	64, // 65: com.xflag.durian.api.Durian.FinishMultiQuest:output_type -> com.xflag.durian.api.FinishMultiQuestResponse
	65, // 66: com.xflag.durian.api.Durian.FinishGuestQuest:output_type -> com.xflag.durian.api.FinishGuestQuestResponse
	66, // 67: com.xflag.durian.api.Durian.ResignGuestQuest:output_type -> com.xflag.durian.api.ResignGuestQuestResponse
	67, // 68: com.xflag.durian.api.Durian.UseQuestDroneItem:output_type -> com.xflag.durian.api.UseQuestDroneItemResponse
	68, // 69: com.xflag.durian.api.Durian.GetQuestBusters:output_type -> com.xflag.durian.api.GetQuestBustersResponse
	69, // 70: com.xflag.durian.api.Durian.CreateQuestLotterySeed:output_type -> com.xflag.durian.api.CreateQuestLotterySeedResponse
	70, // 71: com.xflag.durian.api.Durian.GetUnclosedQuest:output_type -> com.xflag.durian.api.GetUnclosedQuestResponse
	71, // 72: com.xflag.durian.api.Durian.ListUserMonqs:output_type -> com.xflag.durian.api.ListUserMonqsResponse
	72, // 73: com.xflag.durian.api.Durian.EnhanceUserMonq:output_type -> com.xflag.durian.api.EnhanceUserMonqResponse
	73, // 74: com.xflag.durian.api.Durian.KizunaEnhanceUserMonq:output_type -> com.xflag.durian.api.KizunaEnhanceUserMonqResponse
	74, // 75: com.xflag.durian.api.Durian.EvolutionUserMonq:output_type -> com.xflag.durian.api.EvolutionUserMonqResponse
	75, // 76: com.xflag.durian.api.Durian.ListUserAvatars:output_type -> com.xflag.durian.api.ListUserAvatarsResponse
	76, // 77: com.xflag.durian.api.Durian.ListUserBusters:output_type -> com.xflag.durian.api.ListUserBustersResponse
	77, // 78: com.xflag.durian.api.Durian.UpdateUserBuster:output_type -> com.xflag.durian.api.UpdateUserBusterResponse
	78, // 79: com.xflag.durian.api.Durian.UpdateUserProfile:output_type -> com.xflag.durian.api.UpdateUserProfileResponse
	79, // 80: com.xflag.durian.api.Durian.FindUserProfile:output_type -> com.xflag.durian.api.FindUserProfileResponse
	80, // 81: com.xflag.durian.api.Durian.GetUserStatus:output_type -> com.xflag.durian.api.GetUserStatusResponse
	81, // 82: com.xflag.durian.api.Durian.ListUserDroneItems:output_type -> com.xflag.durian.api.ListUserDroneItemsResponse
	82, // 83: com.xflag.durian.api.Durian.ListUserBasicItems:output_type -> com.xflag.durian.api.ListUserBasicItemsResponse
	83, // 84: com.xflag.durian.api.Durian.GetUserOrb:output_type -> com.xflag.durian.api.GetUserOrbResponse
	84, // 85: com.xflag.durian.api.Durian.DrawGacha:output_type -> com.xflag.durian.api.DrawGachaResponse
	85, // 86: com.xflag.durian.api.Durian.ListUserGifts:output_type -> com.xflag.durian.api.ListUserGiftsResponse
	86, // 87: com.xflag.durian.api.Durian.ReceiveUserGifts:output_type -> com.xflag.durian.api.ReceiveUserGiftsResponse
	45, // [45:88] is the sub-list for method output_type
	2,  // [2:45] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	0,  // [0:2] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_api_durian_proto_init() }
func file_api_durian_proto_init() {
	if File_api_durian_proto != nil {
		return
	}
	file_api_user_proto_init()
	file_api_quest_proto_init()
	file_api_debug_proto_init()
	file_api_user_monq_proto_init()
	file_api_user_avatar_proto_init()
	file_api_user_profile_proto_init()
	file_api_user_status_proto_init()
	file_api_user_buster_proto_init()
	file_api_user_drone_item_proto_init()
	file_api_user_basic_item_proto_init()
	file_api_user_orb_proto_init()
	file_api_gacha_proto_init()
	file_api_gift_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_durian_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 2,
			NumServices:   1,
		},
		GoTypes:           file_api_durian_proto_goTypes,
		DependencyIndexes: file_api_durian_proto_depIdxs,
		ExtensionInfos:    file_api_durian_proto_extTypes,
	}.Build()
	File_api_durian_proto = out.File
	file_api_durian_proto_rawDesc = nil
	file_api_durian_proto_goTypes = nil
	file_api_durian_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DurianClient is the client API for Durian service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DurianClient interface {
	UnaryEcho(ctx context.Context, in *UnaryEchoRequest, opts ...grpc.CallOption) (*UnaryEchoResponse, error)
	DebugError(ctx context.Context, in *DebugErrorRequest, opts ...grpc.CallOption) (*DebugErrorResponse, error)
	DebugAddUserMonq(ctx context.Context, in *DebugAddUserMonqRequest, opts ...grpc.CallOption) (*DebugAddUserMonqResponse, error)
	DebugAddUserAvatar(ctx context.Context, in *DebugAddUserAvatarRequest, opts ...grpc.CallOption) (*DebugAddUserAvatarResponse, error)
	DebugAddUserItem(ctx context.Context, in *DebugAddUserItemRequest, opts ...grpc.CallOption) (*DebugAddUserItemResponse, error)
	DebugIssueVoiceChatToken(ctx context.Context, in *DebugIssueVoiceChatTokenRequest, opts ...grpc.CallOption) (*DebugIssueVoiceChatTokenResponse, error)
	DebugRecoverUserStamina(ctx context.Context, in *DebugRecoverUserStaminaRequest, opts ...grpc.CallOption) (*DebugRecoverUserStaminaResponse, error)
	GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error)
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	StartSoloQuest(ctx context.Context, in *StartSoloQuestRequest, opts ...grpc.CallOption) (*StartSoloQuestResponse, error)
	FinishSoloQuest(ctx context.Context, in *FinishSoloQuestRequest, opts ...grpc.CallOption) (*FinishSoloQuestResponse, error)
	ContinueQuest(ctx context.Context, in *ContinueQuestRequest, opts ...grpc.CallOption) (*ContinueQuestResponse, error)
	CreateLocationMatching(ctx context.Context, in *CreateLocationMatchingRequest, opts ...grpc.CallOption) (*CreateLocationMatchingResponse, error)
	CancelLocationMatching(ctx context.Context, in *CancelLocationMatchingRequest, opts ...grpc.CallOption) (*CancelLocationMatchingResponse, error)
	FindLocationMatchings(ctx context.Context, in *FindLocationMatchingsRequest, opts ...grpc.CallOption) (*FindLocationMatchingsResponse, error)
	JoinMultiQuestAsBuster(ctx context.Context, in *JoinMultiQuestAsBusterRequest, opts ...grpc.CallOption) (*JoinMultiQuestAsBusterResponse, error)
	JoinMultiQuestAsDrone(ctx context.Context, in *JoinMultiQuestAsDroneRequest, opts ...grpc.CallOption) (*JoinMultiQuestAsDroneResponse, error)
	LeaveMultiQuest(ctx context.Context, in *LeaveMultiQuestRequest, opts ...grpc.CallOption) (*LeaveMultiQuestResponse, error)
	StartMultiQuest(ctx context.Context, in *StartMultiQuestRequest, opts ...grpc.CallOption) (*StartMultiQuestResponse, error)
	FinishMultiQuest(ctx context.Context, in *FinishMultiQuestRequest, opts ...grpc.CallOption) (*FinishMultiQuestResponse, error)
	FinishGuestQuest(ctx context.Context, in *FinishGuestQuestRequest, opts ...grpc.CallOption) (*FinishGuestQuestResponse, error)
	ResignGuestQuest(ctx context.Context, in *ResignGuestQuestRequest, opts ...grpc.CallOption) (*ResignGuestQuestResponse, error)
	UseQuestDroneItem(ctx context.Context, in *UseQuestDroneItemRequest, opts ...grpc.CallOption) (*UseQuestDroneItemResponse, error)
	GetQuestBusters(ctx context.Context, in *GetQuestBustersRequest, opts ...grpc.CallOption) (*GetQuestBustersResponse, error)
	CreateQuestLotterySeed(ctx context.Context, in *CreateQuestLotterySeedRequest, opts ...grpc.CallOption) (*CreateQuestLotterySeedResponse, error)
	GetUnclosedQuest(ctx context.Context, in *GetUnclosedQuestRequest, opts ...grpc.CallOption) (*GetUnclosedQuestResponse, error)
	ListUserMonqs(ctx context.Context, in *ListUserMonqsRequest, opts ...grpc.CallOption) (*ListUserMonqsResponse, error)
	EnhanceUserMonq(ctx context.Context, in *EnhanceUserMonqRequest, opts ...grpc.CallOption) (*EnhanceUserMonqResponse, error)
	KizunaEnhanceUserMonq(ctx context.Context, in *KizunaEnhanceUserMonqRequest, opts ...grpc.CallOption) (*KizunaEnhanceUserMonqResponse, error)
	EvolutionUserMonq(ctx context.Context, in *EvolutionUserMonqRequest, opts ...grpc.CallOption) (*EvolutionUserMonqResponse, error)
	ListUserAvatars(ctx context.Context, in *ListUserAvatarsRequest, opts ...grpc.CallOption) (*ListUserAvatarsResponse, error)
	ListUserBusters(ctx context.Context, in *ListUserBustersRequest, opts ...grpc.CallOption) (*ListUserBustersResponse, error)
	UpdateUserBuster(ctx context.Context, in *UpdateUserBusterRequest, opts ...grpc.CallOption) (*UpdateUserBusterResponse, error)
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
	FindUserProfile(ctx context.Context, in *FindUserProfileRequest, opts ...grpc.CallOption) (*FindUserProfileResponse, error)
	GetUserStatus(ctx context.Context, in *GetUserStatusRequest, opts ...grpc.CallOption) (*GetUserStatusResponse, error)
	ListUserDroneItems(ctx context.Context, in *ListUserDroneItemsRequest, opts ...grpc.CallOption) (*ListUserDroneItemsResponse, error)
	ListUserBasicItems(ctx context.Context, in *ListUserBasicItemsRequest, opts ...grpc.CallOption) (*ListUserBasicItemsResponse, error)
	GetUserOrb(ctx context.Context, in *GetUserOrbRequest, opts ...grpc.CallOption) (*GetUserOrbResponse, error)
	DrawGacha(ctx context.Context, in *DrawGachaRequest, opts ...grpc.CallOption) (*DrawGachaResponse, error)
	ListUserGifts(ctx context.Context, in *ListUserGiftsRequest, opts ...grpc.CallOption) (*ListUserGiftsResponse, error)
	ReceiveUserGifts(ctx context.Context, in *ReceiveUserGiftsRequest, opts ...grpc.CallOption) (*ReceiveUserGiftsResponse, error)
}

type durianClient struct {
	cc grpc.ClientConnInterface
}

func NewDurianClient(cc grpc.ClientConnInterface) DurianClient {
	return &durianClient{cc}
}

func (c *durianClient) UnaryEcho(ctx context.Context, in *UnaryEchoRequest, opts ...grpc.CallOption) (*UnaryEchoResponse, error) {
	out := new(UnaryEchoResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/UnaryEcho", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) DebugError(ctx context.Context, in *DebugErrorRequest, opts ...grpc.CallOption) (*DebugErrorResponse, error) {
	out := new(DebugErrorResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/DebugError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) DebugAddUserMonq(ctx context.Context, in *DebugAddUserMonqRequest, opts ...grpc.CallOption) (*DebugAddUserMonqResponse, error) {
	out := new(DebugAddUserMonqResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/DebugAddUserMonq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) DebugAddUserAvatar(ctx context.Context, in *DebugAddUserAvatarRequest, opts ...grpc.CallOption) (*DebugAddUserAvatarResponse, error) {
	out := new(DebugAddUserAvatarResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/DebugAddUserAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) DebugAddUserItem(ctx context.Context, in *DebugAddUserItemRequest, opts ...grpc.CallOption) (*DebugAddUserItemResponse, error) {
	out := new(DebugAddUserItemResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/DebugAddUserItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) DebugIssueVoiceChatToken(ctx context.Context, in *DebugIssueVoiceChatTokenRequest, opts ...grpc.CallOption) (*DebugIssueVoiceChatTokenResponse, error) {
	out := new(DebugIssueVoiceChatTokenResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/DebugIssueVoiceChatToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) DebugRecoverUserStamina(ctx context.Context, in *DebugRecoverUserStaminaRequest, opts ...grpc.CallOption) (*DebugRecoverUserStaminaResponse, error) {
	out := new(DebugRecoverUserStaminaResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/DebugRecoverUserStamina", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error) {
	out := new(GetMetadataResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/GetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) StartSoloQuest(ctx context.Context, in *StartSoloQuestRequest, opts ...grpc.CallOption) (*StartSoloQuestResponse, error) {
	out := new(StartSoloQuestResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/StartSoloQuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) FinishSoloQuest(ctx context.Context, in *FinishSoloQuestRequest, opts ...grpc.CallOption) (*FinishSoloQuestResponse, error) {
	out := new(FinishSoloQuestResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/FinishSoloQuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) ContinueQuest(ctx context.Context, in *ContinueQuestRequest, opts ...grpc.CallOption) (*ContinueQuestResponse, error) {
	out := new(ContinueQuestResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/ContinueQuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) CreateLocationMatching(ctx context.Context, in *CreateLocationMatchingRequest, opts ...grpc.CallOption) (*CreateLocationMatchingResponse, error) {
	out := new(CreateLocationMatchingResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/CreateLocationMatching", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) CancelLocationMatching(ctx context.Context, in *CancelLocationMatchingRequest, opts ...grpc.CallOption) (*CancelLocationMatchingResponse, error) {
	out := new(CancelLocationMatchingResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/CancelLocationMatching", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) FindLocationMatchings(ctx context.Context, in *FindLocationMatchingsRequest, opts ...grpc.CallOption) (*FindLocationMatchingsResponse, error) {
	out := new(FindLocationMatchingsResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/FindLocationMatchings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) JoinMultiQuestAsBuster(ctx context.Context, in *JoinMultiQuestAsBusterRequest, opts ...grpc.CallOption) (*JoinMultiQuestAsBusterResponse, error) {
	out := new(JoinMultiQuestAsBusterResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/JoinMultiQuestAsBuster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) JoinMultiQuestAsDrone(ctx context.Context, in *JoinMultiQuestAsDroneRequest, opts ...grpc.CallOption) (*JoinMultiQuestAsDroneResponse, error) {
	out := new(JoinMultiQuestAsDroneResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/JoinMultiQuestAsDrone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) LeaveMultiQuest(ctx context.Context, in *LeaveMultiQuestRequest, opts ...grpc.CallOption) (*LeaveMultiQuestResponse, error) {
	out := new(LeaveMultiQuestResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/LeaveMultiQuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) StartMultiQuest(ctx context.Context, in *StartMultiQuestRequest, opts ...grpc.CallOption) (*StartMultiQuestResponse, error) {
	out := new(StartMultiQuestResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/StartMultiQuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) FinishMultiQuest(ctx context.Context, in *FinishMultiQuestRequest, opts ...grpc.CallOption) (*FinishMultiQuestResponse, error) {
	out := new(FinishMultiQuestResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/FinishMultiQuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) FinishGuestQuest(ctx context.Context, in *FinishGuestQuestRequest, opts ...grpc.CallOption) (*FinishGuestQuestResponse, error) {
	out := new(FinishGuestQuestResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/FinishGuestQuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) ResignGuestQuest(ctx context.Context, in *ResignGuestQuestRequest, opts ...grpc.CallOption) (*ResignGuestQuestResponse, error) {
	out := new(ResignGuestQuestResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/ResignGuestQuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) UseQuestDroneItem(ctx context.Context, in *UseQuestDroneItemRequest, opts ...grpc.CallOption) (*UseQuestDroneItemResponse, error) {
	out := new(UseQuestDroneItemResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/UseQuestDroneItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) GetQuestBusters(ctx context.Context, in *GetQuestBustersRequest, opts ...grpc.CallOption) (*GetQuestBustersResponse, error) {
	out := new(GetQuestBustersResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/GetQuestBusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) CreateQuestLotterySeed(ctx context.Context, in *CreateQuestLotterySeedRequest, opts ...grpc.CallOption) (*CreateQuestLotterySeedResponse, error) {
	out := new(CreateQuestLotterySeedResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/CreateQuestLotterySeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) GetUnclosedQuest(ctx context.Context, in *GetUnclosedQuestRequest, opts ...grpc.CallOption) (*GetUnclosedQuestResponse, error) {
	out := new(GetUnclosedQuestResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/GetUnclosedQuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) ListUserMonqs(ctx context.Context, in *ListUserMonqsRequest, opts ...grpc.CallOption) (*ListUserMonqsResponse, error) {
	out := new(ListUserMonqsResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/ListUserMonqs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) EnhanceUserMonq(ctx context.Context, in *EnhanceUserMonqRequest, opts ...grpc.CallOption) (*EnhanceUserMonqResponse, error) {
	out := new(EnhanceUserMonqResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/EnhanceUserMonq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) KizunaEnhanceUserMonq(ctx context.Context, in *KizunaEnhanceUserMonqRequest, opts ...grpc.CallOption) (*KizunaEnhanceUserMonqResponse, error) {
	out := new(KizunaEnhanceUserMonqResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/KizunaEnhanceUserMonq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) EvolutionUserMonq(ctx context.Context, in *EvolutionUserMonqRequest, opts ...grpc.CallOption) (*EvolutionUserMonqResponse, error) {
	out := new(EvolutionUserMonqResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/EvolutionUserMonq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) ListUserAvatars(ctx context.Context, in *ListUserAvatarsRequest, opts ...grpc.CallOption) (*ListUserAvatarsResponse, error) {
	out := new(ListUserAvatarsResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/ListUserAvatars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) ListUserBusters(ctx context.Context, in *ListUserBustersRequest, opts ...grpc.CallOption) (*ListUserBustersResponse, error) {
	out := new(ListUserBustersResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/ListUserBusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) UpdateUserBuster(ctx context.Context, in *UpdateUserBusterRequest, opts ...grpc.CallOption) (*UpdateUserBusterResponse, error) {
	out := new(UpdateUserBusterResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/UpdateUserBuster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/UpdateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) FindUserProfile(ctx context.Context, in *FindUserProfileRequest, opts ...grpc.CallOption) (*FindUserProfileResponse, error) {
	out := new(FindUserProfileResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/FindUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) GetUserStatus(ctx context.Context, in *GetUserStatusRequest, opts ...grpc.CallOption) (*GetUserStatusResponse, error) {
	out := new(GetUserStatusResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/GetUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) ListUserDroneItems(ctx context.Context, in *ListUserDroneItemsRequest, opts ...grpc.CallOption) (*ListUserDroneItemsResponse, error) {
	out := new(ListUserDroneItemsResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/ListUserDroneItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) ListUserBasicItems(ctx context.Context, in *ListUserBasicItemsRequest, opts ...grpc.CallOption) (*ListUserBasicItemsResponse, error) {
	out := new(ListUserBasicItemsResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/ListUserBasicItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) GetUserOrb(ctx context.Context, in *GetUserOrbRequest, opts ...grpc.CallOption) (*GetUserOrbResponse, error) {
	out := new(GetUserOrbResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/GetUserOrb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) DrawGacha(ctx context.Context, in *DrawGachaRequest, opts ...grpc.CallOption) (*DrawGachaResponse, error) {
	out := new(DrawGachaResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/DrawGacha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) ListUserGifts(ctx context.Context, in *ListUserGiftsRequest, opts ...grpc.CallOption) (*ListUserGiftsResponse, error) {
	out := new(ListUserGiftsResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/ListUserGifts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durianClient) ReceiveUserGifts(ctx context.Context, in *ReceiveUserGiftsRequest, opts ...grpc.CallOption) (*ReceiveUserGiftsResponse, error) {
	out := new(ReceiveUserGiftsResponse)
	err := c.cc.Invoke(ctx, "/com.xflag.durian.api.Durian/ReceiveUserGifts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DurianServer is the server API for Durian service.
type DurianServer interface {
	UnaryEcho(context.Context, *UnaryEchoRequest) (*UnaryEchoResponse, error)
	DebugError(context.Context, *DebugErrorRequest) (*DebugErrorResponse, error)
	DebugAddUserMonq(context.Context, *DebugAddUserMonqRequest) (*DebugAddUserMonqResponse, error)
	DebugAddUserAvatar(context.Context, *DebugAddUserAvatarRequest) (*DebugAddUserAvatarResponse, error)
	DebugAddUserItem(context.Context, *DebugAddUserItemRequest) (*DebugAddUserItemResponse, error)
	DebugIssueVoiceChatToken(context.Context, *DebugIssueVoiceChatTokenRequest) (*DebugIssueVoiceChatTokenResponse, error)
	DebugRecoverUserStamina(context.Context, *DebugRecoverUserStaminaRequest) (*DebugRecoverUserStaminaResponse, error)
	GetMetadata(context.Context, *GetMetadataRequest) (*GetMetadataResponse, error)
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	StartSoloQuest(context.Context, *StartSoloQuestRequest) (*StartSoloQuestResponse, error)
	FinishSoloQuest(context.Context, *FinishSoloQuestRequest) (*FinishSoloQuestResponse, error)
	ContinueQuest(context.Context, *ContinueQuestRequest) (*ContinueQuestResponse, error)
	CreateLocationMatching(context.Context, *CreateLocationMatchingRequest) (*CreateLocationMatchingResponse, error)
	CancelLocationMatching(context.Context, *CancelLocationMatchingRequest) (*CancelLocationMatchingResponse, error)
	FindLocationMatchings(context.Context, *FindLocationMatchingsRequest) (*FindLocationMatchingsResponse, error)
	JoinMultiQuestAsBuster(context.Context, *JoinMultiQuestAsBusterRequest) (*JoinMultiQuestAsBusterResponse, error)
	JoinMultiQuestAsDrone(context.Context, *JoinMultiQuestAsDroneRequest) (*JoinMultiQuestAsDroneResponse, error)
	LeaveMultiQuest(context.Context, *LeaveMultiQuestRequest) (*LeaveMultiQuestResponse, error)
	StartMultiQuest(context.Context, *StartMultiQuestRequest) (*StartMultiQuestResponse, error)
	FinishMultiQuest(context.Context, *FinishMultiQuestRequest) (*FinishMultiQuestResponse, error)
	FinishGuestQuest(context.Context, *FinishGuestQuestRequest) (*FinishGuestQuestResponse, error)
	ResignGuestQuest(context.Context, *ResignGuestQuestRequest) (*ResignGuestQuestResponse, error)
	UseQuestDroneItem(context.Context, *UseQuestDroneItemRequest) (*UseQuestDroneItemResponse, error)
	GetQuestBusters(context.Context, *GetQuestBustersRequest) (*GetQuestBustersResponse, error)
	CreateQuestLotterySeed(context.Context, *CreateQuestLotterySeedRequest) (*CreateQuestLotterySeedResponse, error)
	GetUnclosedQuest(context.Context, *GetUnclosedQuestRequest) (*GetUnclosedQuestResponse, error)
	ListUserMonqs(context.Context, *ListUserMonqsRequest) (*ListUserMonqsResponse, error)
	EnhanceUserMonq(context.Context, *EnhanceUserMonqRequest) (*EnhanceUserMonqResponse, error)
	KizunaEnhanceUserMonq(context.Context, *KizunaEnhanceUserMonqRequest) (*KizunaEnhanceUserMonqResponse, error)
	EvolutionUserMonq(context.Context, *EvolutionUserMonqRequest) (*EvolutionUserMonqResponse, error)
	ListUserAvatars(context.Context, *ListUserAvatarsRequest) (*ListUserAvatarsResponse, error)
	ListUserBusters(context.Context, *ListUserBustersRequest) (*ListUserBustersResponse, error)
	UpdateUserBuster(context.Context, *UpdateUserBusterRequest) (*UpdateUserBusterResponse, error)
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	FindUserProfile(context.Context, *FindUserProfileRequest) (*FindUserProfileResponse, error)
	GetUserStatus(context.Context, *GetUserStatusRequest) (*GetUserStatusResponse, error)
	ListUserDroneItems(context.Context, *ListUserDroneItemsRequest) (*ListUserDroneItemsResponse, error)
	ListUserBasicItems(context.Context, *ListUserBasicItemsRequest) (*ListUserBasicItemsResponse, error)
	GetUserOrb(context.Context, *GetUserOrbRequest) (*GetUserOrbResponse, error)
	DrawGacha(context.Context, *DrawGachaRequest) (*DrawGachaResponse, error)
	ListUserGifts(context.Context, *ListUserGiftsRequest) (*ListUserGiftsResponse, error)
	ReceiveUserGifts(context.Context, *ReceiveUserGiftsRequest) (*ReceiveUserGiftsResponse, error)
}

// UnimplementedDurianServer can be embedded to have forward compatible implementations.
type UnimplementedDurianServer struct {
}

func (*UnimplementedDurianServer) UnaryEcho(context.Context, *UnaryEchoRequest) (*UnaryEchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryEcho not implemented")
}
func (*UnimplementedDurianServer) DebugError(context.Context, *DebugErrorRequest) (*DebugErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugError not implemented")
}
func (*UnimplementedDurianServer) DebugAddUserMonq(context.Context, *DebugAddUserMonqRequest) (*DebugAddUserMonqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugAddUserMonq not implemented")
}
func (*UnimplementedDurianServer) DebugAddUserAvatar(context.Context, *DebugAddUserAvatarRequest) (*DebugAddUserAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugAddUserAvatar not implemented")
}
func (*UnimplementedDurianServer) DebugAddUserItem(context.Context, *DebugAddUserItemRequest) (*DebugAddUserItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugAddUserItem not implemented")
}
func (*UnimplementedDurianServer) DebugIssueVoiceChatToken(context.Context, *DebugIssueVoiceChatTokenRequest) (*DebugIssueVoiceChatTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugIssueVoiceChatToken not implemented")
}
func (*UnimplementedDurianServer) DebugRecoverUserStamina(context.Context, *DebugRecoverUserStaminaRequest) (*DebugRecoverUserStaminaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugRecoverUserStamina not implemented")
}
func (*UnimplementedDurianServer) GetMetadata(context.Context, *GetMetadataRequest) (*GetMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (*UnimplementedDurianServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (*UnimplementedDurianServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedDurianServer) StartSoloQuest(context.Context, *StartSoloQuestRequest) (*StartSoloQuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSoloQuest not implemented")
}
func (*UnimplementedDurianServer) FinishSoloQuest(context.Context, *FinishSoloQuestRequest) (*FinishSoloQuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishSoloQuest not implemented")
}
func (*UnimplementedDurianServer) ContinueQuest(context.Context, *ContinueQuestRequest) (*ContinueQuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContinueQuest not implemented")
}
func (*UnimplementedDurianServer) CreateLocationMatching(context.Context, *CreateLocationMatchingRequest) (*CreateLocationMatchingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocationMatching not implemented")
}
func (*UnimplementedDurianServer) CancelLocationMatching(context.Context, *CancelLocationMatchingRequest) (*CancelLocationMatchingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelLocationMatching not implemented")
}
func (*UnimplementedDurianServer) FindLocationMatchings(context.Context, *FindLocationMatchingsRequest) (*FindLocationMatchingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLocationMatchings not implemented")
}
func (*UnimplementedDurianServer) JoinMultiQuestAsBuster(context.Context, *JoinMultiQuestAsBusterRequest) (*JoinMultiQuestAsBusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinMultiQuestAsBuster not implemented")
}
func (*UnimplementedDurianServer) JoinMultiQuestAsDrone(context.Context, *JoinMultiQuestAsDroneRequest) (*JoinMultiQuestAsDroneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinMultiQuestAsDrone not implemented")
}
func (*UnimplementedDurianServer) LeaveMultiQuest(context.Context, *LeaveMultiQuestRequest) (*LeaveMultiQuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveMultiQuest not implemented")
}
func (*UnimplementedDurianServer) StartMultiQuest(context.Context, *StartMultiQuestRequest) (*StartMultiQuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMultiQuest not implemented")
}
func (*UnimplementedDurianServer) FinishMultiQuest(context.Context, *FinishMultiQuestRequest) (*FinishMultiQuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishMultiQuest not implemented")
}
func (*UnimplementedDurianServer) FinishGuestQuest(context.Context, *FinishGuestQuestRequest) (*FinishGuestQuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishGuestQuest not implemented")
}
func (*UnimplementedDurianServer) ResignGuestQuest(context.Context, *ResignGuestQuestRequest) (*ResignGuestQuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResignGuestQuest not implemented")
}
func (*UnimplementedDurianServer) UseQuestDroneItem(context.Context, *UseQuestDroneItemRequest) (*UseQuestDroneItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseQuestDroneItem not implemented")
}
func (*UnimplementedDurianServer) GetQuestBusters(context.Context, *GetQuestBustersRequest) (*GetQuestBustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestBusters not implemented")
}
func (*UnimplementedDurianServer) CreateQuestLotterySeed(context.Context, *CreateQuestLotterySeedRequest) (*CreateQuestLotterySeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestLotterySeed not implemented")
}
func (*UnimplementedDurianServer) GetUnclosedQuest(context.Context, *GetUnclosedQuestRequest) (*GetUnclosedQuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnclosedQuest not implemented")
}
func (*UnimplementedDurianServer) ListUserMonqs(context.Context, *ListUserMonqsRequest) (*ListUserMonqsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserMonqs not implemented")
}
func (*UnimplementedDurianServer) EnhanceUserMonq(context.Context, *EnhanceUserMonqRequest) (*EnhanceUserMonqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnhanceUserMonq not implemented")
}
func (*UnimplementedDurianServer) KizunaEnhanceUserMonq(context.Context, *KizunaEnhanceUserMonqRequest) (*KizunaEnhanceUserMonqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KizunaEnhanceUserMonq not implemented")
}
func (*UnimplementedDurianServer) EvolutionUserMonq(context.Context, *EvolutionUserMonqRequest) (*EvolutionUserMonqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvolutionUserMonq not implemented")
}
func (*UnimplementedDurianServer) ListUserAvatars(context.Context, *ListUserAvatarsRequest) (*ListUserAvatarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserAvatars not implemented")
}
func (*UnimplementedDurianServer) ListUserBusters(context.Context, *ListUserBustersRequest) (*ListUserBustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserBusters not implemented")
}
func (*UnimplementedDurianServer) UpdateUserBuster(context.Context, *UpdateUserBusterRequest) (*UpdateUserBusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserBuster not implemented")
}
func (*UnimplementedDurianServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (*UnimplementedDurianServer) FindUserProfile(context.Context, *FindUserProfileRequest) (*FindUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserProfile not implemented")
}
func (*UnimplementedDurianServer) GetUserStatus(context.Context, *GetUserStatusRequest) (*GetUserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStatus not implemented")
}
func (*UnimplementedDurianServer) ListUserDroneItems(context.Context, *ListUserDroneItemsRequest) (*ListUserDroneItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserDroneItems not implemented")
}
func (*UnimplementedDurianServer) ListUserBasicItems(context.Context, *ListUserBasicItemsRequest) (*ListUserBasicItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserBasicItems not implemented")
}
func (*UnimplementedDurianServer) GetUserOrb(context.Context, *GetUserOrbRequest) (*GetUserOrbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOrb not implemented")
}
func (*UnimplementedDurianServer) DrawGacha(context.Context, *DrawGachaRequest) (*DrawGachaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrawGacha not implemented")
}
func (*UnimplementedDurianServer) ListUserGifts(context.Context, *ListUserGiftsRequest) (*ListUserGiftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGifts not implemented")
}
func (*UnimplementedDurianServer) ReceiveUserGifts(context.Context, *ReceiveUserGiftsRequest) (*ReceiveUserGiftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveUserGifts not implemented")
}

func RegisterDurianServer(s *grpc.Server, srv DurianServer) {
	s.RegisterService(&_Durian_serviceDesc, srv)
}

func _Durian_UnaryEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryEchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).UnaryEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/UnaryEcho",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).UnaryEcho(ctx, req.(*UnaryEchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_DebugError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).DebugError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/DebugError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).DebugError(ctx, req.(*DebugErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_DebugAddUserMonq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugAddUserMonqRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).DebugAddUserMonq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/DebugAddUserMonq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).DebugAddUserMonq(ctx, req.(*DebugAddUserMonqRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_DebugAddUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugAddUserAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).DebugAddUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/DebugAddUserAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).DebugAddUserAvatar(ctx, req.(*DebugAddUserAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_DebugAddUserItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugAddUserItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).DebugAddUserItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/DebugAddUserItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).DebugAddUserItem(ctx, req.(*DebugAddUserItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_DebugIssueVoiceChatToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugIssueVoiceChatTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).DebugIssueVoiceChatToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/DebugIssueVoiceChatToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).DebugIssueVoiceChatToken(ctx, req.(*DebugIssueVoiceChatTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_DebugRecoverUserStamina_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugRecoverUserStaminaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).DebugRecoverUserStamina(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/DebugRecoverUserStamina",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).DebugRecoverUserStamina(ctx, req.(*DebugRecoverUserStaminaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/GetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).GetMetadata(ctx, req.(*GetMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_StartSoloQuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSoloQuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).StartSoloQuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/StartSoloQuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).StartSoloQuest(ctx, req.(*StartSoloQuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_FinishSoloQuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishSoloQuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).FinishSoloQuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/FinishSoloQuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).FinishSoloQuest(ctx, req.(*FinishSoloQuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_ContinueQuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinueQuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).ContinueQuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/ContinueQuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).ContinueQuest(ctx, req.(*ContinueQuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_CreateLocationMatching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocationMatchingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).CreateLocationMatching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/CreateLocationMatching",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).CreateLocationMatching(ctx, req.(*CreateLocationMatchingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_CancelLocationMatching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelLocationMatchingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).CancelLocationMatching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/CancelLocationMatching",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).CancelLocationMatching(ctx, req.(*CancelLocationMatchingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_FindLocationMatchings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindLocationMatchingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).FindLocationMatchings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/FindLocationMatchings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).FindLocationMatchings(ctx, req.(*FindLocationMatchingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_JoinMultiQuestAsBuster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinMultiQuestAsBusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).JoinMultiQuestAsBuster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/JoinMultiQuestAsBuster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).JoinMultiQuestAsBuster(ctx, req.(*JoinMultiQuestAsBusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_JoinMultiQuestAsDrone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinMultiQuestAsDroneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).JoinMultiQuestAsDrone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/JoinMultiQuestAsDrone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).JoinMultiQuestAsDrone(ctx, req.(*JoinMultiQuestAsDroneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_LeaveMultiQuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveMultiQuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).LeaveMultiQuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/LeaveMultiQuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).LeaveMultiQuest(ctx, req.(*LeaveMultiQuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_StartMultiQuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMultiQuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).StartMultiQuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/StartMultiQuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).StartMultiQuest(ctx, req.(*StartMultiQuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_FinishMultiQuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishMultiQuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).FinishMultiQuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/FinishMultiQuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).FinishMultiQuest(ctx, req.(*FinishMultiQuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_FinishGuestQuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishGuestQuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).FinishGuestQuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/FinishGuestQuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).FinishGuestQuest(ctx, req.(*FinishGuestQuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_ResignGuestQuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResignGuestQuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).ResignGuestQuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/ResignGuestQuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).ResignGuestQuest(ctx, req.(*ResignGuestQuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_UseQuestDroneItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseQuestDroneItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).UseQuestDroneItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/UseQuestDroneItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).UseQuestDroneItem(ctx, req.(*UseQuestDroneItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_GetQuestBusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestBustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).GetQuestBusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/GetQuestBusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).GetQuestBusters(ctx, req.(*GetQuestBustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_CreateQuestLotterySeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestLotterySeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).CreateQuestLotterySeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/CreateQuestLotterySeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).CreateQuestLotterySeed(ctx, req.(*CreateQuestLotterySeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_GetUnclosedQuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnclosedQuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).GetUnclosedQuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/GetUnclosedQuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).GetUnclosedQuest(ctx, req.(*GetUnclosedQuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_ListUserMonqs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserMonqsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).ListUserMonqs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/ListUserMonqs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).ListUserMonqs(ctx, req.(*ListUserMonqsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_EnhanceUserMonq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnhanceUserMonqRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).EnhanceUserMonq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/EnhanceUserMonq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).EnhanceUserMonq(ctx, req.(*EnhanceUserMonqRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_KizunaEnhanceUserMonq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KizunaEnhanceUserMonqRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).KizunaEnhanceUserMonq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/KizunaEnhanceUserMonq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).KizunaEnhanceUserMonq(ctx, req.(*KizunaEnhanceUserMonqRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_EvolutionUserMonq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvolutionUserMonqRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).EvolutionUserMonq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/EvolutionUserMonq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).EvolutionUserMonq(ctx, req.(*EvolutionUserMonqRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_ListUserAvatars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserAvatarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).ListUserAvatars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/ListUserAvatars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).ListUserAvatars(ctx, req.(*ListUserAvatarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_ListUserBusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserBustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).ListUserBusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/ListUserBusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).ListUserBusters(ctx, req.(*ListUserBustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_UpdateUserBuster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserBusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).UpdateUserBuster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/UpdateUserBuster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).UpdateUserBuster(ctx, req.(*UpdateUserBusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_FindUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).FindUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/FindUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).FindUserProfile(ctx, req.(*FindUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_GetUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).GetUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/GetUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).GetUserStatus(ctx, req.(*GetUserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_ListUserDroneItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserDroneItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).ListUserDroneItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/ListUserDroneItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).ListUserDroneItems(ctx, req.(*ListUserDroneItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_ListUserBasicItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserBasicItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).ListUserBasicItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/ListUserBasicItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).ListUserBasicItems(ctx, req.(*ListUserBasicItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_GetUserOrb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOrbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).GetUserOrb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/GetUserOrb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).GetUserOrb(ctx, req.(*GetUserOrbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_DrawGacha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrawGachaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).DrawGacha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/DrawGacha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).DrawGacha(ctx, req.(*DrawGachaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_ListUserGifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserGiftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).ListUserGifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/ListUserGifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).ListUserGifts(ctx, req.(*ListUserGiftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Durian_ReceiveUserGifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveUserGiftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurianServer).ReceiveUserGifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.xflag.durian.api.Durian/ReceiveUserGifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurianServer).ReceiveUserGifts(ctx, req.(*ReceiveUserGiftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Durian_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.xflag.durian.api.Durian",
	HandlerType: (*DurianServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryEcho",
			Handler:    _Durian_UnaryEcho_Handler,
		},
		{
			MethodName: "DebugError",
			Handler:    _Durian_DebugError_Handler,
		},
		{
			MethodName: "DebugAddUserMonq",
			Handler:    _Durian_DebugAddUserMonq_Handler,
		},
		{
			MethodName: "DebugAddUserAvatar",
			Handler:    _Durian_DebugAddUserAvatar_Handler,
		},
		{
			MethodName: "DebugAddUserItem",
			Handler:    _Durian_DebugAddUserItem_Handler,
		},
		{
			MethodName: "DebugIssueVoiceChatToken",
			Handler:    _Durian_DebugIssueVoiceChatToken_Handler,
		},
		{
			MethodName: "DebugRecoverUserStamina",
			Handler:    _Durian_DebugRecoverUserStamina_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _Durian_GetMetadata_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _Durian_RegisterUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Durian_Login_Handler,
		},
		{
			MethodName: "StartSoloQuest",
			Handler:    _Durian_StartSoloQuest_Handler,
		},
		{
			MethodName: "FinishSoloQuest",
			Handler:    _Durian_FinishSoloQuest_Handler,
		},
		{
			MethodName: "ContinueQuest",
			Handler:    _Durian_ContinueQuest_Handler,
		},
		{
			MethodName: "CreateLocationMatching",
			Handler:    _Durian_CreateLocationMatching_Handler,
		},
		{
			MethodName: "CancelLocationMatching",
			Handler:    _Durian_CancelLocationMatching_Handler,
		},
		{
			MethodName: "FindLocationMatchings",
			Handler:    _Durian_FindLocationMatchings_Handler,
		},
		{
			MethodName: "JoinMultiQuestAsBuster",
			Handler:    _Durian_JoinMultiQuestAsBuster_Handler,
		},
		{
			MethodName: "JoinMultiQuestAsDrone",
			Handler:    _Durian_JoinMultiQuestAsDrone_Handler,
		},
		{
			MethodName: "LeaveMultiQuest",
			Handler:    _Durian_LeaveMultiQuest_Handler,
		},
		{
			MethodName: "StartMultiQuest",
			Handler:    _Durian_StartMultiQuest_Handler,
		},
		{
			MethodName: "FinishMultiQuest",
			Handler:    _Durian_FinishMultiQuest_Handler,
		},
		{
			MethodName: "FinishGuestQuest",
			Handler:    _Durian_FinishGuestQuest_Handler,
		},
		{
			MethodName: "ResignGuestQuest",
			Handler:    _Durian_ResignGuestQuest_Handler,
		},
		{
			MethodName: "UseQuestDroneItem",
			Handler:    _Durian_UseQuestDroneItem_Handler,
		},
		{
			MethodName: "GetQuestBusters",
			Handler:    _Durian_GetQuestBusters_Handler,
		},
		{
			MethodName: "CreateQuestLotterySeed",
			Handler:    _Durian_CreateQuestLotterySeed_Handler,
		},
		{
			MethodName: "GetUnclosedQuest",
			Handler:    _Durian_GetUnclosedQuest_Handler,
		},
		{
			MethodName: "ListUserMonqs",
			Handler:    _Durian_ListUserMonqs_Handler,
		},
		{
			MethodName: "EnhanceUserMonq",
			Handler:    _Durian_EnhanceUserMonq_Handler,
		},
		{
			MethodName: "KizunaEnhanceUserMonq",
			Handler:    _Durian_KizunaEnhanceUserMonq_Handler,
		},
		{
			MethodName: "EvolutionUserMonq",
			Handler:    _Durian_EvolutionUserMonq_Handler,
		},
		{
			MethodName: "ListUserAvatars",
			Handler:    _Durian_ListUserAvatars_Handler,
		},
		{
			MethodName: "ListUserBusters",
			Handler:    _Durian_ListUserBusters_Handler,
		},
		{
			MethodName: "UpdateUserBuster",
			Handler:    _Durian_UpdateUserBuster_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _Durian_UpdateUserProfile_Handler,
		},
		{
			MethodName: "FindUserProfile",
			Handler:    _Durian_FindUserProfile_Handler,
		},
		{
			MethodName: "GetUserStatus",
			Handler:    _Durian_GetUserStatus_Handler,
		},
		{
			MethodName: "ListUserDroneItems",
			Handler:    _Durian_ListUserDroneItems_Handler,
		},
		{
			MethodName: "ListUserBasicItems",
			Handler:    _Durian_ListUserBasicItems_Handler,
		},
		{
			MethodName: "GetUserOrb",
			Handler:    _Durian_GetUserOrb_Handler,
		},
		{
			MethodName: "DrawGacha",
			Handler:    _Durian_DrawGacha_Handler,
		},
		{
			MethodName: "ListUserGifts",
			Handler:    _Durian_ListUserGifts_Handler,
		},
		{
			MethodName: "ReceiveUserGifts",
			Handler:    _Durian_ReceiveUserGifts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/durian.proto",
}
